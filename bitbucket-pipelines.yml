image: atlassian/default-image:latest

definitions:
  steps:
    - step: &BuildImage
        name: Build Docker Image
        services:
          - docker
        caches:
          - docker
        script:
          - export ENVIRONMENT=$(cat ./environment.txt)
          - export SCOPE=$(cat ./testing_scope.txt)
          - export SUITE=$(cat ./suite.txt)
          - echo $ENVIRONMENT
          - echo $SUITE
          - echo $SCOPE
          - IMAGE_NAME_MIN=automatedtest
          - docker login $AcrName --username $AcrUser --password $AcrPassword
          - docker build -t $AcrName/$IMAGE_NAME_MIN:latest --build-arg ARG_ENVIRONMENT=$ENVIRONMENT --build-arg ARG_SCOPE=$SCOPE --build-arg ARG_SUITE=$SUITE .
          - docker push $AcrName/$IMAGE_NAME_MIN:latest
    - step: &DeployPod
        name: 'Deploy to AKS'
        script:
          - export ENVIRONMENT=$(cat ./environment.txt)
          - export SCOPE=$(cat ./testing_scope.txt)
          - export SUITE=$(cat ./suite.txt)
          - export PODNAME=$ENVIRONMENT-$SUITE-$BITBUCKET_BUILD_NUMBER
          - export PODNAME=$(echo $PODNAME | sed 's/@//g')
          - export PODNAME=$(echo $PODNAME | tr "[:upper:]" "[:lower:]")
          - echo $ENVIRONMENT
          - echo $SUITE
          - echo $SCOPE
          - echo $PODNAME
          - sudo apt-get update
          - sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
          - curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null
          - AZ_REPO=$(lsb_release -cs)
          - echo "deb [arch=all] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          - sudo apt-get update
          - sudo apt-get install azure-cli
          - sudo az aks install-cli
          - az login --service-principal -u $AzUser -p $AzPassword --tenant $AcrTenant
          - az aks get-credentials --resource-group Default-Web-WestUS --name TestingAutomationTest
          - ./multipod.sh $ENVIRONMENT "$SUITE" "$SCOPE" "$PODNAME"
pipelines:
  custom:
    Push-Image:
      - step:
          name: Push image
          script:
            - export ENVIRONMENT=staging
            - export SCOPE=@MMRS
            - export SUITE=services
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *BuildImage
    PreStaging-Products:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=pre-staging
            - export SCOPE=$ProductsScopeSplitted
            - export SUITE=products
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
    PreStaging-Services:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=pre-staging
            - export SCOPE=$ServicesScopeSplitted
            - export SUITE=services
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
    Staging-Products:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=staging
            - export SCOPE=$ProductsScopeSplitted
            - export SUITE=products
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
    Staging-Services:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=staging
            - export SCOPE=$ServicesScopeSplitted
            - export SUITE=services
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
    Staging-Products-One-Pod:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=staging
            - export SCOPE=@MTR
            - export SUITE=products
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
    Staging-Services-One-Pod:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=staging
            - export SCOPE=@MMRS
            - export SUITE=services
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
    PreStaging-Products-One-Pod:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=staging
            - export SCOPE=@MTR
            - export SUITE=products
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
    PreStaging-Services-One-Pod:
      - step:
          name: Set Testing Scope and Environment
          clone:
            enabled: false
          script:
            - export ENVIRONMENT=staging
            - export SCOPE=@MMRS
            - export SUITE=services
            - echo $ENVIRONMENT > environment.txt
            - echo $SUITE > suite.txt
            - echo $SCOPE > testing_scope.txt
          artifacts:
            - environment.txt
            - testing_scope.txt
            - suite.txt
      - step: *DeployPod
